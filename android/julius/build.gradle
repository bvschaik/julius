apply plugin: 'com.android.application'

buildDir = file("../distribution/${rootProject.name}/${project.name}")

task getVersion {
    def cmakeFile = rootProject.file("../CMakeLists.txt").text
    def project_version_major = (cmakeFile =~ /set\(PROJECT_VERSION_MAJOR (\d+)\)/)[0][1].toInteger()
    def project_version_minor = (cmakeFile =~ /set\(PROJECT_VERSION_MINOR (\d+)\)/)[0][1].toInteger()
    def project_version_patch = (cmakeFile =~ /set\(PROJECT_VERSION_PATCH (\d+)\)/)[0][1].toInteger()
    def is_release_version = (cmakeFile =~ /set\(IS_RELEASE_VERSION ([A-Z]+)\)/)[0][1].toBoolean()

    def versionNumber = "${project_version_major}.${project_version_minor}.${project_version_patch}"
    def versionDetail = " unknown development version"
    ext.versionCode = project_version_major * 10000 + project_version_minor * 100 + project_version_patch

    try {
        def stdout = new ByteArrayOutputStream()
        def stderr = new ByteArrayOutputStream()
        def tweak_result
        def dirty_postfix = ""

        if (is_release_version) {
            versionDetail = ""
            throw new StopExecutionException()
        }
        tweak_result = exec {
            ignoreExitValue = true
            commandLine "git", "rev-list", "--count", "HEAD", "^tags/v${project_version_major}.${project_version_minor}.${project_version_patch}"
            standardOutput = stdout
            errorOutput = stderr
            workingDir = "../.."
        }.exitValue

        def project_version_tweak = stdout.toString().trim()
        stdout.reset()

        def not_repository_clone = exec {
            commandLine "git", "rev-parse", "--short", "--verify", "HEAD"
            workingDir "../.."
            standardOutput = stdout
            errorOutput = stderr
            ignoreExitValue = true
        }.exitValue

        if (not_repository_clone) {
            throw new StopExecutionException()
        }

        def version_commit_hash = stdout.toString().trim()
        def version_commit_dirty = exec {
            commandLine "git", "diff-index", "--quiet", "HEAD", "--"
            workingDir "../.."
            ignoreExitValue = true
        }.exitValue

        if (version_commit_dirty) {
            dirty_postfix = "-dirty"
        }

        // Happens on a shallow git clone, like Travis does. Append date to version ref.
        if (tweak_result) {
            def today = new Date().format("yyyyMMdd")
            versionDetail = "-${today}-${version_commit_hash}${dirty_postfix}"
        } else {
            versionDetail = ".${project_version_tweak}-${version_commit_hash}${dirty_postfix}"
        }
        ext.versionName = "${versionNumber}${versionDetail}"
    } catch(Exception) {
        ext.versionName = "${versionNumber}${versionDetail}"
    }
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    ndkVersion "21.1.6352462"

    defaultConfig {
        applicationId "com.github.bvschaik.julius"
        minSdkVersion 21
        targetSdkVersion 29

        versionName getVersion.versionName
        versionCode getVersion.versionCode

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_BUILD=ON -DSYSTEM_LIBS=OFF"
            }
        }
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
        sourceSets {
            main {
                java {
                    srcDir 'src/main/java'
                    srcDir '../../ext/SDL2'
                    exclude '**/android-project-ant/**'
                }
                res {
                    srcDir '../../res/android'
                }
            }
        }
    }
    buildTypes {
        debug {
            ext.alwaysUpdateBuildId = false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "../../CMakeLists.txt"
        }
    }
}

repositories {
    google()
}

dependencies {
    implementation project(':SDL2')
}
