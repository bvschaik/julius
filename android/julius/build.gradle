apply plugin: 'com.android.application'

task getVersion {
    def cmakeFile = rootProject.file("../CMakeLists.txt").text
    def versionMajor = (cmakeFile =~ /set\(PROJECT_VERSION_MAJOR (\d+)\)/)[0][1].toInteger()
    def versionMinor = (cmakeFile =~ /set\(PROJECT_VERSION_MINOR (\d+)\)/)[0][1].toInteger()
    def versionPatch = (cmakeFile =~ /set\(PROJECT_VERSION_PATCH (\d+)\)/)[0][1].toInteger()
    def isRelease = (cmakeFile =~ /set\(IS_RELEASE_VERSION ([A-Z]+)\)/)[0][1].toBoolean()

    def versionTweak = 0
    def versionDetail
    if (isRelease) {
        versionDetail = ""
    } else {
        try {
            def stdout = new ByteArrayOutputStream()
            def stderr = new ByteArrayOutputStream()

            def tweakResult = exec {
                commandLine "git", "rev-list", "--count", "HEAD", "^tags/v${versionMajor}.${versionMinor}.${versionPatch}"
                workingDir = "../.."
                standardOutput = stdout
                errorOutput = stderr
                ignoreExitValue = true
            }.exitValue

            versionTweak = stdout.toString().trim().toInteger()
            stdout.reset()

            def lastCommitResult = exec {
                commandLine "git", "rev-parse", "--short", "--verify", "HEAD"
                workingDir "../.."
                standardOutput = stdout
                errorOutput = stderr
                ignoreExitValue = true
            }.exitValue
            def versionCommit = stdout.toString().trim()

            def isDirty = exec {
                commandLine "git", "diff-index", "--quiet", "HEAD", "--"
                workingDir "../.."
                ignoreExitValue = true
            }.exitValue

            versionDetail = ""
            if (tweakResult == 0) {
                versionDetail += ".$versionTweak"
            }
            if (lastCommitResult == 0) {
                versionDetail += "-$versionCommit"
            }
            if (isDirty) {
                versionDetail += "-dirty"
            }
        } catch (Exception) {
            versionDetail = " unknown development version"
        }
    }

    def versionNumber = "${versionMajor}.${versionMinor}.${versionPatch}"

    ext.versionCode = versionMajor * 10000000 + versionMinor * 100000 + versionPatch * 1000 + versionTweak
    ext.versionName = versionNumber + versionDetail
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    ndkVersion "21.3.6528147"

    defaultConfig {
        applicationId "com.github.bvschaik.julius"
        minSdkVersion 21
        targetSdkVersion 29

        versionName getVersion.versionName
        versionCode getVersion.versionCode

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_BUILD=ON", "-DSYSTEM_LIBS=OFF"
            }
        }
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
        sourceSets {
            main.res.srcDirs += '../../res/android'
        }
    }
    signingConfigs {
        release {
            def isCI = System.getenv("CI") == "true"
            if (isCI) {
                storeFile file("../julius.keystore")
                storePassword System.getenv("android_keystore_password")
                keyAlias "julius"
                keyPassword System.getenv("android_keystore_key_password")
            }
        }
    }
    buildTypes {
        debug {
            ext.alwaysUpdateBuildId = false
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    externalNativeBuild {
        cmake {
            path "../../CMakeLists.txt"
        }
    }
}

repositories {
    google()
    jcenter()
}

dependencies {
    implementation project(':SDL2')
}
